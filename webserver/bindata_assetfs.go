// Code generated by go-bindata.
// sources:
// data/.DS_Store
// data/img/hello.png
// data/index.html
// DO NOT EDIT!

package webserver

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDs_store = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x98\x31\x6a\x03\x31\x10\x45\x67\xd6\x2a\x04\x6e\x54\xa6\x54\x9b\xd2\x37\x10\x46\x39\x81\x2f\x10\xf0\x82\x13\xc8\x62\x17\x71\xaf\x2e\xc7\xc9\x5d\x72\x80\xf4\xb9\x45\xac\xcc\xc7\x11\xd8\x2a\x5c\x39\x38\xff\x81\x78\x0b\xa3\x99\xd5\x36\x92\x66\x45\x44\x97\xfb\x71\x21\x12\x0e\x8f\x5e\xcc\xf2\x26\x67\xf1\x18\x27\x0c\xb0\xab\xf5\x6a\x8d\xc5\x6a\xbd\x9d\x76\xe7\xab\x74\xa8\xb9\x33\x79\x96\x49\x36\x2f\x9b\x36\x7f\x7e\xff\x1b\x99\xb6\x39\x8f\xfb\xd7\xb5\xc8\xc7\xe7\xd7\xfb\x4f\xf8\x18\x19\x3b\x91\xdd\x53\x5b\x2d\x5c\xb4\x28\x42\x08\x21\xe4\x86\x51\x93\x9f\x5f\x77\x19\x84\x90\x3f\x48\xdd\x1f\x22\x9c\xe0\x62\x56\xc4\x07\xd8\x35\x39\x01\x8e\x70\x82\x8b\x59\x31\x6f\x80\x1d\xec\xe1\x00\x47\x38\xc1\xc5\x8c\x4d\x4b\xd1\x7c\x28\xde\xac\xe8\x50\x14\x37\x7d\x8d\x70\xba\xf0\xa3\x09\xf9\x27\xcc\x4c\xa1\x9e\xff\x0f\xd2\xed\xff\x09\x21\x37\x8c\xba\xbc\xca\x4b\x39\x36\x04\x27\xd4\xb3\x36\x1e\xc6\x63\x9b\xd4\xb9\x04\x0c\xf6\xb3\xf0\xae\x99\x17\xe1\x04\x17\x33\x2f\x02\x84\x5c\x8b\xef\x00\x00\x00\xff\xff\xfa\xa8\xb5\xce\x04\x18\x00\x00")

func dataDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_dataDs_store,
		"data/.DS_Store",
	)
}

func dataDs_store() (*asset, error) {
	bytes, err := dataDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1454979422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataImgHelloPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x79\x54\x92\xe9\x1a\x07\x44\x20\x4b\xa5\x5c\x30\x9b\x12\x97\x5c\xd0\xf8\x50\x8b\xd4\x8c\x34\x49\x32\xc5\xdc\x15\x97\x84\x04\x09\x77\x10\x43\x33\xc9\x2d\xd3\xac\x89\xca\xd2\xd2\xb1\xd2\x72\xc9\xca\xc2\x35\x9d\x0c\xc3\x14\xb5\x5c\x72\xc8\x1c\x5b\x4c\xc7\xad\xb1\x74\x74\xd4\x52\xcb\x8b\x53\x77\xe6\x9e\x7b\xe7\xdc\x3f\xee\x39\xf7\x3d\xe7\xfb\xbe\xf7\x79\x9f\xe7\xf7\x7b\xbe\xdf\xef\x3b\xdf\x7b\xde\x0c\x17\x67\x92\xa2\x82\xa6\x02\x08\x04\x52\x74\xd8\x4b\x74\x93\x3d\xcb\x64\x97\x3b\x02\x26\xbb\x0f\x18\xcd\x87\x83\x40\xe0\xa3\x2c\x3b\x3b\x17\x07\x3b\x3b\xb4\x0b\x27\x32\x98\x15\xc6\x00\x81\x0c\xcf\x06\x51\xa9\x18\x07\x13\x43\x09\x8d\x46\xa5\x4a\x9e\x1a\x1b\x29\x70\x78\x6e\xe9\xe9\xa7\xdc\xa8\x0f\xc5\xa2\xa7\x22\x31\xba\x89\xfa\x18\x9d\x9f\xe3\xef\x3f\xa0\x81\x1c\x10\x27\xaa\x1c\xad\x6f\x16\x21\x0a\x80\x5f\x93\x9f\xec\x9b\x59\x8a\xeb\x29\xaa\x3a\xfa\x45\x1d\x5f\x7e\x89\xe3\xb5\xd9\xaa\x76\x36\x09\xcc\xdb\x17\xc2\x36\x93\x93\xd3\x85\x0b\x7e\xc8\x73\xcb\xcb\x5b\x4d\x1f\x05\xf5\x59\xb5\xca\xef\xd9\x6c\x33\xb7\x06\xed\x57\xf3\xe3\x75\x50\x13\x01\x4c\xcf\x54\x05\x6f\x44\xd0\xdf\x80\xef\xf5\x68\x4f\x28\xa3\x0f\xaf\xcb\x79\xda\x04\xf1\x52\x59\xf7\xcb\x1a\xba\x23\xa8\x0f\xe2\x80\xac\x86\xa5\xff\xa0\x44\xf3\x4b\x7c\xd1\xba\x3e\xc3\xc8\xa6\x1a\x2e\xc1\xa6\x6f\x10\x25\xf6\x88\xf7\x34\xbe\x14\xb9\xf5\x9e\x4d\xac\x77\x80\xdd\xb7\xbc\x81\xdb\x61\x73\xed\xf1\xf9\xcb\x28\xcd\x35\x1c\x38\xb2\x1d\x17\x8b\xab\xc5\x19\xe2\x72\xcc\x35\x70\x3e\x66\x63\x66\x16\x17\xaf\x7b\x65\x25\xaa\x5a\x8d\xa2\x3c\xd4\x19\x45\xcc\x2c\x43\x0b\x88\x1d\xde\xb3\xd1\x72\x57\xcd\xd5\x4a\xbd\xaa\xbd\xa4\x46\x73\x80\xb2\x9f\xd4\x28\x11\x75\x81\xae\x2b\xa9\x32\x91\x85\xbb\xe0\x49\x64\xa6\xea\x8e\x33\xc8\xf6\x40\x89\x88\x5a\xfa\x44\x24\x7a\x99\x82\x74\xbc\xdc\x2c\xba\x9b\xa0\x2c\x97\xd2\x64\x94\x9a\xd3\x66\x0d\x83\xf1\x43\x61\x69\xe1\xa3\x0a\xeb\x32\xd7\xbd\x55\x62\x2e\x35\xef\x4e\x0f\xcc\x0b\x0e\x83\xd2\x66\x2c\x4c\x71\x77\x5f\x2f\x2e\x2f\x57\x68\xca\xc9\x2d\xea\xc1\xd2\x1e\xaa\x2c\x2f\x2f\x3f\x18\x5b\x5e\x7e\x98\x99\x34\x27\x37\x34\x61\xa3\x04\xd2\xe3\xb1\x06\x4e\x85\xae\x53\x96\x7d\x87\x3c\x96\x87\x0f\xd7\x87\xec\x64\x15\x14\x19\x8e\xa5\xd1\x23\x0f\x32\xb0\xb1\xe1\x51\xa0\x95\x61\x1d\x6b\x25\x9b\x86\x33\xb8\x34\x74\x6c\x78\x58\x44\xb4\x55\xec\x4e\x9d\x3f\x2a\xac\x64\xf3\x95\x65\x40\x07\xfd\x47\x09\x37\x74\xa7\x8e\x0f\xd9\x05\x6d\x17\xc9\x61\xa0\xb7\x61\xb7\x62\x71\x3a\x04\x05\x34\x1a\x6d\xcd\xa1\x07\x5b\xb9\x11\xed\xbf\xc1\x65\xd1\x4e\x9d\x43\x5c\x6e\x94\x15\x00\xf0\x78\x3c\x2c\xcf\x1c\x1b\xc9\x61\x02\xa6\x96\x96\x96\x00\xce\x0c\x30\x33\xdb\x22\xab\xd8\x12\x1d\x17\xc1\xa5\xc5\x6e\x89\x88\xd6\xfd\x4a\xf2\x4f\x1e\x22\x23\x3a\x88\xc3\x8a\xe2\xb2\x22\x23\xd0\x2b\x31\xed\x60\x64\x0c\x77\xa7\x8e\xce\xb7\x9a\xaf\xe3\x6b\x23\x46\x2c\xeb\xaf\x4e\x11\xd1\xdf\x64\xc9\x04\x02\x2b\x19\xc0\x14\x8b\x03\xfe\xe4\x5e\xa1\x5f\x59\xb5\x72\x61\xc5\x32\xc2\x7c\x88\xac\x70\x46\x44\xb4\xac\x07\xc1\x74\xbb\xa9\x35\xf0\xb7\x99\xbf\x45\x52\xfe\xca\x5b\x98\xff\x2b\x90\xf2\x1f\x40\x6b\xe0\xdf\xf4\x7c\x35\x0b\xf8\xe6\x16\x41\xc1\x1a\xf8\xd3\x79\x82\xc2\x91\x63\xe6\xa7\x41\x20\xb8\xc8\x81\x68\xeb\x11\x0b\x7e\x1f\xc0\x72\xd7\x71\x40\x92\x91\x48\xb5\xc7\xe0\x6d\x1e\xaa\xa7\x2f\xe5\x7c\x5a\xb5\xe1\x5e\xe0\x5c\x76\x78\x98\x53\xd8\x44\xb9\xff\x64\xa8\x47\x93\x5f\xea\xda\xae\xa7\xde\xbe\x11\xca\x3a\xe4\x20\x5e\x0c\x2f\xe6\x39\xd4\xae\x87\xb4\x09\x08\x64\x32\x3c\xb5\x8a\xf8\x8b\x9f\xcf\x18\x9c\xd3\x47\x34\x81\x92\x4e\xe5\x9e\x7e\x7f\x02\x5e\x13\x40\xaf\x47\x53\xa1\x60\x6f\x21\x1f\x93\x60\x76\x30\xdd\x70\x2d\xf4\x25\x32\x6a\xf3\xaf\xaf\x02\xc4\xe4\xb4\x30\x14\xf4\x14\x5a\x80\x2f\xd8\x93\x85\x80\x10\xd0\x68\xfa\x2c\x98\xb8\x96\x06\x03\x6b\x97\xad\xcf\xdb\x93\xa9\x8c\x40\x50\x12\x40\xae\xc4\x1c\x5b\x1b\x49\x08\x8c\xd9\x3d\x28\x07\xd9\xed\xa5\x65\xa3\xba\x36\x18\x89\x14\x5e\x6e\xa4\x54\x7e\x4c\x4c\x14\x48\xe1\xc8\x3d\xa9\xeb\xa1\xa9\xb7\x82\xa3\xd4\xb7\xfc\x7f\x28\x6a\x09\x29\xdb\xf0\x78\x7b\xe3\x0b\x0a\x4f\x3b\xd4\x57\xb5\x3f\x83\x26\xdd\x5d\x11\xe0\x5b\x75\x33\x5d\xf3\x62\x52\x81\x37\xb2\x0b\x51\x7b\x4e\x6d\xbd\x5a\xf8\xf2\x80\xc0\xf7\x76\x11\x01\xfb\xec\xcd\x9b\x06\xfe\x8d\x63\xdb\xf1\x3a\xe1\x85\x1a\xa3\x1b\x93\xae\x85\x3e\xaf\x45\x4a\x77\x40\x39\x44\x7f\xa4\xc6\xe5\x5b\x6c\xf6\xde\x89\x4a\x94\x8c\xfe\xc1\xbd\xaa\x0e\x73\xed\xb2\x18\xed\xaa\x5e\xed\xff\x16\xf5\x66\x42\x0a\x6b\xbf\x0c\xb7\x33\x35\x1d\x17\x79\xac\x6a\xf6\xb1\xfd\x24\x12\xa9\x30\x47\xa7\xc5\x27\xd5\x06\x4d\x97\x77\xe5\xcd\xcf\x8d\x35\x9e\xa8\x09\x1e\xe5\x58\xfa\x06\xfa\x55\x20\x38\x6c\x86\x07\x14\x62\x2c\xb7\x84\xc6\xe4\x4d\x3b\x76\x94\x80\x5a\xd9\xdd\xb6\x68\x9c\xd0\xbe\xe5\x71\xe3\xc5\xa5\x99\xf9\xf9\xc6\x1d\x92\xe7\x12\xb4\x20\x56\x68\xaf\xbf\xee\x60\xba\xb1\xcc\x13\xef\x74\xfa\x89\x12\x34\x52\x93\x62\x1a\xb5\x30\xfd\xc9\x9c\xbc\x7f\x3f\x49\x3e\xd3\x7b\x87\xbe\x81\xc1\x2a\x2d\xa6\xb1\x93\xda\xa1\xe0\xe0\xe6\xfb\xfb\x2e\x2a\xea\x22\x25\x61\x89\xb9\xca\xe8\x77\xef\xda\x4e\x1e\x99\xa6\xb2\xd8\xae\xef\xf9\xf1\xf1\xbf\x1e\xf6\xb9\xda\xef\x9e\x55\x30\xdc\x66\x46\x76\x76\x72\xc1\x5c\x70\xab\xcb\xcf\xcf\x1f\x5b\x58\x48\x0b\x61\x6e\xc3\x64\x3b\x66\x39\x17\x8f\x8f\x8c\x34\x9f\xdf\x28\xc8\xdc\xd5\xc9\x8d\x63\x3b\xec\x5f\xea\xec\xbb\x7b\xbb\xce\xeb\x86\x73\xb1\xae\x7b\xb4\x33\xf5\x35\x05\x9f\x4f\xd9\xe6\x1a\xca\x64\xb6\x5d\x1f\x3a\xaf\x02\xa1\xcd\x7c\xca\xe0\x39\x6d\xad\xa8\xf3\x0d\xf0\x24\xca\xaf\xdf\x8e\xc7\x8f\x0b\x46\x63\x72\x6f\xab\x93\x9d\x08\xfd\xf2\x83\x83\x43\x55\x64\xb5\xa2\x12\x7f\x8c\xab\x7e\xee\xec\x91\x92\x89\x37\x29\x89\xdd\x4f\xde\xe9\x61\xcc\x8c\xf6\xde\x34\x0f\xb9\x21\x24\xc2\x97\xb6\xee\xd6\x70\xf7\x1c\x76\xbb\xd4\xdc\xd2\x52\xca\xe7\x3b\xa3\x50\x28\x85\x82\xf8\x06\x64\x52\x27\xc9\xaf\xb8\x27\x41\x3f\x4e\xab\x40\xb7\xe7\xc3\x6f\x47\x2b\x2b\xdf\x22\x71\xfb\xbc\x04\x90\xf5\x9e\x2a\x1e\xb9\x25\xc7\x00\x60\x4b\x69\xe6\xaa\x23\x0f\x4a\x27\x4b\x4b\x1d\xa4\x6a\xa1\x05\x0d\xc5\x28\x86\x48\x33\xf0\xaa\xc6\xa8\x19\x8c\x32\x37\xf7\xe1\x7b\xe7\x5a\x26\xa8\x9b\x16\x3f\xb7\x39\x9e\x40\x20\xb8\x3d\x38\x50\x8c\xe7\x4d\xfa\x9c\x11\x1e\x4c\x48\x20\x33\xde\x89\xc5\xe2\xc0\xa6\xf2\x28\xcb\x54\x33\x10\x07\xb3\x44\xd5\xf7\xd5\x3f\x1f\x57\x38\x94\x9d\xf2\xb1\x45\xe7\xca\x58\xcf\xf1\xe4\x73\xa7\x87\xea\x6f\x99\x8b\x95\xb9\x90\x37\x9f\xee\x5b\x86\xe0\xfd\x3c\x06\x6e\x29\xbd\xda\x0b\xea\x7d\x19\x94\x55\xfb\x5d\xa3\x7c\xee\x87\xa0\xec\x90\xaa\x1a\xf6\x98\x74\x6d\xd5\x1b\xfb\xf6\xc4\xa1\xf3\x43\xdb\x89\xd2\xc4\xc4\xbb\xb5\xef\xd4\xec\x1d\x4d\x57\xad\x9d\xb2\x55\xfc\x05\x9a\x91\x9f\xa3\x4a\xda\xc5\x37\x1c\x4c\x32\xe9\x73\xf2\x92\xbe\x46\x8f\x8c\xb3\xc8\x17\x90\xaf\x22\xb2\xb5\x84\x79\x37\xec\x0b\x6d\xb3\xb3\xb3\xa1\xd3\xf9\xa6\x71\xe5\x77\xee\xbc\x2e\xd1\x08\x7a\x55\x12\xd0\xfd\xcc\xe9\x96\xd1\xa6\x17\xb3\x3d\x6f\xad\x91\x29\x6e\x63\x0d\xf4\x38\x43\xca\x55\xa0\xc5\xa0\xcd\x72\x5e\xa1\xeb\x78\xb1\x80\x0d\xd9\xbd\x3d\xec\x91\xc3\x56\x6f\x6c\xc5\xce\xf9\xdf\x87\x3e\xfa\x64\x60\xd4\xaf\x5c\xb9\x1d\xdd\x76\x7a\x41\xd8\xfd\x44\xd3\x13\x67\x73\x21\xe2\x4a\xc4\xcf\xac\xf2\x0e\x97\x45\x38\x3c\x24\x26\xd8\xc4\x2e\xae\xa3\x24\xaf\xce\xe3\x7e\xe2\x39\xb0\x39\x6c\x66\x66\xe6\x77\x89\x30\x7f\x9c\x74\xf2\xa7\x8a\xa3\xc4\x94\xe5\x5b\x87\xea\x7b\x0e\x9f\x3c\x5a\x61\xbd\xf7\x44\x34\x73\x0d\x84\x3d\x9d\xd7\xdb\x29\xbd\xfa\xbe\xa1\x4f\x2f\xcb\xa7\xeb\xec\x86\xce\xd2\x80\xb3\x34\xd7\x63\x43\xc4\x9c\x5c\xa0\x27\xa1\xb0\x54\xb8\x1d\xcf\x1f\x54\x31\x6a\x37\x38\xf0\xd2\x77\xc9\x44\x09\x44\xa3\xeb\xd2\xf5\x81\xdb\x3d\x9f\x77\xa9\x14\xae\x29\x31\x01\xca\x9e\x94\x99\x6f\xad\x63\x6c\x45\x4e\x31\xde\x7e\xea\x17\x2f\x3b\x6f\xec\x10\xbb\xf0\xa9\x9a\x8a\x15\x28\x45\x93\xe8\xa2\x84\x43\x35\xd2\xd6\xab\xad\x37\x2b\xaa\x66\x2c\x1e\xac\xc9\xb5\x5f\x6f\xf2\x6e\x48\xbc\xa0\x2e\x34\x9b\xd6\x98\xed\xe4\xd4\xf8\xe4\x19\x71\xc2\x79\x3b\x3d\x4c\x0e\x38\x48\xe2\x81\x28\x3c\xf9\x86\x7b\x65\x45\x45\x19\x22\x05\x3b\xff\x74\xe9\x9e\xe3\xc8\x87\xe2\x9f\x4a\xc5\xf7\x37\x52\xbe\xc3\xeb\x8a\x0b\xf8\x11\x9f\x97\x3e\x5d\xde\xf6\xc3\x62\x5f\x75\x58\x65\xf0\x69\x4c\xec\x6c\x45\xdd\x4d\x0a\x4a\x7d\xc4\x33\x1c\xbe\xa3\xa2\xef\xbb\x4e\x2f\x13\xc5\x98\x16\x14\xec\x80\xc6\x6c\x61\x2e\xdc\x21\x73\xe9\x8e\x7c\x16\xa4\x2e\x89\x6b\x35\x34\x1e\xa3\xf5\xf9\x79\x64\x0b\x2b\xda\xfe\xfd\x94\xc1\x95\xce\x33\x7a\xeb\x08\x05\xde\x36\xc6\xbf\xa9\x6e\x38\x10\x02\xe9\xeb\x18\x3e\x0b\x85\x47\x09\xe8\x5e\x30\x35\xf7\xbd\xf5\xf5\xf1\x95\x75\x75\x05\xc9\xa9\x36\xd7\xae\x95\xfd\x74\xec\x11\xdf\xa5\x26\x63\x31\xdc\x15\x3e\x38\xac\xf9\x42\x19\xfa\xec\x76\xeb\xac\x5e\xdb\x1a\xe4\xa0\xc1\x99\x36\x38\xd9\x53\xf1\xd9\xb5\xe1\xb7\xf1\xdf\x93\x16\x0d\xfd\x5c\xca\x06\x89\x86\x4e\x28\x84\x9c\xfe\xa9\x8f\x93\xb5\x26\x1a\x45\xe3\xee\x46\xd9\xed\x0d\x17\x31\x25\x41\xae\x8b\x45\x71\xcd\xa2\xfb\xa7\xc0\xfe\xaa\xbe\x54\xfa\xf1\x1e\xfe\x93\x4b\xbb\xbf\xcf\x80\x3d\x3a\x38\x95\x9a\xa9\x12\xb7\xe9\x3a\xd7\xc2\xa6\x43\xa4\xf5\xbb\x93\x25\xad\x7f\x64\xb5\x29\x8e\x7c\xbc\x51\x09\x0b\xa2\x0a\xe4\x28\x75\xda\x5d\x7e\xfd\xfd\x21\x53\xc7\xfb\x92\x5e\x57\xd7\x3c\x5c\xae\x0b\x11\x28\x3d\x50\x09\xe9\xd6\xe9\x2d\x13\xdc\x20\xcd\xbd\x48\x8b\xe7\x1b\x58\xd4\xcb\x7e\xe7\x67\xcd\x23\x45\xaf\x03\xfa\x84\x55\x55\x9f\x17\x36\xac\x3e\x22\x48\x67\x14\x7f\xe9\xf1\x3d\x3d\x65\x1b\x8d\x2d\x53\x5b\xfb\x11\x40\x0a\x0f\x6e\x2a\x9f\x4f\x63\x01\xe5\x33\xb6\x69\x1c\xbc\xc4\x5c\x3a\x35\x72\xc9\xf5\x35\x41\x2e\xd9\xaa\xf5\x55\xe8\x64\x40\x50\xed\xa9\xde\x78\xff\xc9\xc8\x31\x16\xfb\x81\xef\x40\xa9\x31\xb7\x4f\xa3\x8b\x16\xa2\xa0\xe5\xc4\xe8\x7b\x09\xd1\x0e\x9d\xbc\x34\xa1\x66\x03\x34\xcd\x61\xfa\xd3\x3e\x9b\x76\x66\xba\x31\x92\xe1\x3e\x25\x40\x77\x0a\x6d\x53\x4d\xe0\x48\x75\x63\xe0\x7b\x3b\x34\x5d\xfa\x68\x78\x87\x05\xf4\xe5\x9d\x6a\xf9\x62\x4b\xeb\xd6\x8c\x2b\x8a\x1f\x67\xca\x27\xdf\x5e\x03\x2e\xef\xd4\x96\x6d\x66\x47\x76\x3b\x1e\x56\x52\x03\x6b\x87\x96\x4c\x65\x72\x00\x44\xea\x3e\xaf\xf3\x85\x47\x81\xab\x92\x86\x6e\x22\xda\x43\xc8\xe7\x3e\x47\x5f\x16\x9c\xf4\xb4\xd5\x46\x62\x28\x29\x9c\x7d\xbf\xfc\x9c\x21\xdb\xfa\x3b\x6a\x7d\xc7\x2f\x08\xa4\x6d\x77\x7f\x1e\xcf\xfa\xbb\x48\xda\x45\x57\x5c\xbc\xcf\x37\xee\x46\x15\x5b\x6b\x0f\x1c\xd1\x6d\x97\x4a\xab\x16\xa2\x73\x3c\x1b\x4c\x2d\x9d\x6f\xcf\xe3\xc5\x16\x7d\xd8\xea\x39\x92\x68\x5b\xc5\xe0\x88\x3f\x12\x8f\xe1\x65\xce\xf3\xec\x9e\xeb\x83\xc1\xbd\x4f\x14\xce\x45\x4c\x4e\xe8\x81\x57\xff\x66\x3a\x88\xa8\x0d\x7e\x9e\xde\x0f\x8c\x6c\x46\xc8\x5e\x2e\x39\x79\x23\xcf\xfb\xf8\x2d\xf6\x19\x6a\xf2\x04\x4a\xa8\x6f\xf8\x82\xcd\xf3\x94\x68\xce\x23\xf4\x25\xfc\xff\x39\xf9\x65\x19\x34\xfd\xe6\xcc\xb3\x25\xd2\x8f\xbb\x56\x4e\x56\x0e\x7b\x9c\x89\x77\x76\x53\x93\xff\x11\x00\x00\xff\xff\x06\xde\xfa\x14\x29\x0b\x00\x00")

func dataImgHelloPngBytes() ([]byte, error) {
	return bindataRead(
		_dataImgHelloPng,
		"data/img/hello.png",
	)
}

func dataImgHelloPng() (*asset, error) {
	bytes, err := dataImgHelloPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/img/hello.png", size: 2857, mode: os.FileMode(420), modTime: time.Unix(1454721742, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\x28\xc9\xcd\xb1\xe3\xb2\xc9\xcc\x4d\x57\x28\x2e\x4a\xb6\x55\x02\x32\xf4\x33\x52\x73\x72\xf2\xf5\x0a\xf2\xd2\x95\xf4\xed\xb8\x3c\x40\x1c\x1d\x85\xf0\xfc\xa2\x9c\x14\x45\x2e\x1b\x7d\xb0\x06\x40\x00\x00\x00\xff\xff\xa3\x8f\xb8\xc9\x37\x00\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 55, mode: os.FileMode(420), modTime: time.Unix(1454979384, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/.DS_Store": dataDs_store,
	"data/img/hello.png": dataImgHelloPng,
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{dataDs_store, map[string]*bintree{}},
		"img": &bintree{nil, map[string]*bintree{
			"hello.png": &bintree{dataImgHelloPng, map[string]*bintree{}},
		}},
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
